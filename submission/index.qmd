---
submission_id: 499 - to clarify
title: Multimodal UI for Video Retrieval at the Swiss Federal Archives
author:
  - name: Audray Sauvage
    orcid: 
    email: audray.sauvage@bar.admin.ch
    affiliations:
      - Swiss Federal Archives
  - name: Julien A. Raemy
    orcid: 0000-0002-4711-5759
    email: julien.raemy@bar.admin.ch
    affiliations:
      - Swiss Federal Archives
keywords:
  - Content-based Retrieval
  - Digital Archives
  - Object Detection
  - Machine Learning
abstract: |
The Swiss Federal Archives (SFA) is responsible for the archiving of the administrative records of the federal authorities, in particular the government, the parliament and the civil service. Access to and the consultation of records by researchers and the public is a cornerstone of its legal mandate. In order to meet the current and future access requirements, the SFA is pursuing a strategy of consistent digital transformation aimed at facilitating access to archival information for users. 
The advent of digital technology and artificial intelligence (AI) has revolutionised methods and tools in this context. For several years, the SFA has been combining AI methods and their application to historical sources, such as the use of Automated Handwritten Text Recognition (AHTR) on the website Minutes of the Federal Council (1848-1972). 
In 2022, the SFA decided to implement Archipanion, which is powered by Vitrivr, a content-based multimedia information retrieval system, to improve access to its digital film collection "Filmwochenschau (1940-1975)". Formerly indexed using standard methods without direct content exploitation, the collection is now easily searchable through AI-driven, content-based processing. This technological advancement provides both patrons and scholars with unprecedented access to over 6,600 videos, facilitating research and exploration anytime and anywhere.
date: 07-25-2024
bibliography: references.bib
---

## Introduction

This is a placeholder for the extended abstract of the paper. It should be between 1500 and 2000 words (excluding references).

Check <https://quarto.org/docs/authoring/markdown-basics.html> for more information on how to use markdown, <https://quarto.org/docs/authoring/cross-references.html> for more information on how to use cross-references like this (See @fig-example and @fig-plots), and <https://quarto.org/docs/authoring/footnotes-and-citations.html> for more information on how to use citations like this one [@haber2011, p. 11].

::: {#fig-example}

![Figure caption text.](images/placeholder.png)

:::

## Section 1

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat. Duis semper. Duis arcu massa, scelerisque vitae, consequat in, pretium a, enim. Pellentesque congue. Ut in risus volutpat libero pharetra tempor. Cras vestibulum bibendum augue. Praesent egestas leo in pede. Praesent blandit odio eu enim. Pellentesque sed dui ut augue blandit sodales. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Aliquam nibh. Mauris ac mauris sed pede pellentesque fermentum. Maecenas adipiscing ante non diam sodales hendrerit.

## Quarto Usage

For advanced users, we recommend exploring features as **Code Blocks**: Use triple backticks (```) to create code blocks. Specify the language for syntax highlighting (e.g., ```python`). Quarto lets you run code and embed its output directly into your document. See <https://quarto.org/docs/computations/inline-code.html> for guidance.

```{python}
#| output: false
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Create some simple synthetic historical data
np.random.seed(0)
years = pd.date_range('1900-01-01', periods=120, freq='Y')
values = np.random.normal(loc=0, scale=1, size=120).cumsum()

data = pd.DataFrame({
    'Year': years.year,
    'Value': values
})

# Save the data to a CSV file
data.to_csv('data/sample_data.csv', index=False)
```

```{python}
#| label: fig-plots
# Plotting the data
plt.figure(figsize=(10, 6))
plt.plot(data['Year'], data['Value'], marker='o')
plt.title('Synthetic Historical Data')
plt.xlabel('Year')
plt.ylabel('Value')
plt.grid(True)
plt.show()
```
